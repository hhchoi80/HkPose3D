@page "/pose3d"
@inject IJSRuntime JSRuntime

<h4>Immersive Surveillance with 3D Pose</h4>

<!-- 연결 및 해제 버튼 -->
<div class="container mt-3">
    <div class="row align-items-center mb-3">
        <div class="col-auto d-flex align-items-center">
            <label for="ipAddress" class="form-label mb-0 me-2">IP:</label>
            <input type="text" id="ipAddress" class="form-control" placeholder="IP Address" value="127.0.0.1" style="width: 150px;" />
        </div>
        <div class="col-auto d-flex align-items-center">
            <label for="portNumber" class="form-label mb-0 me-2">Port:</label>
            <input type="number" id="portNumber" class="form-control" placeholder="Port" value="12222" style="width: 100px;" />
        </div>
        <div class="col-auto">
            <button id="connectBtn" class="btn btn-primary me-2" @onclick="ConnectSocket" disabled="@isConnected">Connect</button>
            <button id="disconnectBtn" class="btn btn-danger" @onclick="CloseSocket" disabled="@(!isConnected)">Disconnect</button>
        </div>
    </div>
</div>

<div style="width: 100%; height: 80vh;">
    <canvas id="pose3dCanvas" style="width: 100%; height: 100%; border: 1px solid black; display: block;"></canvas>
</div>
    

@code {
    private bool isConnected = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            
        }
    }

    private async Task ConnectSocket()
    {
        if (!isConnected)
        {
            var ipAddress = await JSRuntime.InvokeAsync<string>("eval", "document.getElementById('ipAddress').value || '127.0.0.1'");
            var portNumber = await JSRuntime.InvokeAsync<int>("eval", "parseInt(document.getElementById('portNumber').value) || 12222");

            await JSRuntime.InvokeVoidAsync("GetPose3D", "pose3dCanvas", ipAddress, portNumber);
            isConnected = true;
        }
    }

    private async Task CloseSocket()
    {
        if (isConnected)
        {
            // 자바스크립트의 closeSockets 함수를 호출하여 소켓 닫기
            await JSRuntime.InvokeVoidAsync("CloseWebGLSocket");
            isConnected = false;
        }
    }

    public async ValueTask DisposeAsync()
    {
        // 화면을 나갈 때 소켓을 닫는 함수 호출
        await CloseSocket();
    }
}